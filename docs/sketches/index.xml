<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sketches on VirtualDataSet</title>
    <link>http://docs.virtdata.io/sketches/</link>
    <description>Recent content in Sketches on VirtualDataSet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>APL 2.0</copyright>
    <lastBuildDate>Sat, 16 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://docs.virtdata.io/sketches/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Function Graph Kernel API</title>
      <link>http://docs.virtdata.io/sketches/function_graph_kernel_api/</link>
      <pubDate>Sat, 16 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://docs.virtdata.io/sketches/function_graph_kernel_api/</guid>
      <description>The functional graph kernel API is simply the implementation of a function graph, as realized in your application. This is the result of binding a parsed function graph template to a set of functions within a graph.
What makes the functional kernel useful are the various ways that you can interact with it. This is defined by the API.
Setting coordinates Whe a functional kernel is realized in your runtime, it will have a set of named inputs which we call coordinates.</description>
    </item>
    
    <item>
      <title>Design Sketches</title>
      <link>http://docs.virtdata.io/sketches/</link>
      <pubDate>Fri, 19 May 2017 21:51:26 +0000</pubDate>
      
      <guid>http://docs.virtdata.io/sketches/</guid>
      <description>This section holds design sketches of some of the more esoteric design elements of EngineBlock.
 Function Graph Kernel  </description>
    </item>
    
    <item>
      <title>FGK Implementation Ideas</title>
      <link>http://docs.virtdata.io/sketches/function_graph_kernel_impl/</link>
      <pubDate>Sat, 16 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://docs.virtdata.io/sketches/function_graph_kernel_impl/</guid>
      <description>Computed State and Function Unrolling For the above example, here are a specific and finite set of uncomputed states that are possible when the user attempts to observe thee first_name field. They are:
 cycle and identity have both been changed cycle has been changed user_id has been changed neither cycle nor user_id have been changed  Of these, there are only three distict and actionable execution plans, owing to the fact that when cycle has been chaged, identity might as well have been changed in terms of how it affects the value of the first_name field.</description>
    </item>
    
    <item>
      <title>FGK Sketch</title>
      <link>http://docs.virtdata.io/sketches/function_graph_kernel/</link>
      <pubDate>Sat, 16 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://docs.virtdata.io/sketches/function_graph_kernel/</guid>
      <description>Description This section elaborates on the function graph kernel design.
Herein, the function graph kernel will be abbreviated as FGK, although it needs a better name. In essence, the function graph kernel is a runtime implementation of the Function Graph Kernel API.
A function graph is a directed graph. No loops are currently supported.
Let us start with an example function graph template:
 digraph function_graph { size=&amp;#34;4,4&amp;#34; f1[label=&amp;#34;f()&amp;#34;,shape=&amp;#34;ellipse&amp;#34;]; f2[label=&amp;#34;g()&amp;#34;,shape=&amp;#34;ellipse&amp;#34;]; f3[label=&amp;#34;h()&amp;#34;,shape=&amp;#34;ellipse&amp;#34;]; f4[label=&amp;#34;i()&amp;#34;,shape=&amp;#34;ellipse&amp;#34;]; node[shape=&amp;#34;box&amp;#34;]; var1,var2,var3,var4; var2 -&amp;gt; f1 -&amp;gt; f2 -&amp;gt; var4; var1 -&amp;gt; f1 -&amp;gt; var3; var2 -&amp;gt; f4 -&amp;gt; var6; f1 -&amp;gt; var5 -&amp;gt; f3 -&amp;gt; var3; subgraph cluster1 { label=&amp;#34;inputs&amp;#34;; var1,var2; } subgraph cluster2 { label=&amp;#34;outputs&amp;#34;; var3, var4, var6; } }   This is a basic model of a function graph without the usual data types and meaningful names.</description>
    </item>
    
  </channel>
</rss>